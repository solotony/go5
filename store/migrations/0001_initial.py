# Generated by Django 3.0.6 on 2020-10-10 21:57

import common.models.thumbnailed
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import easy_thumbnails.fields
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_seo_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='SEO title')),
                ('_seo_description', models.CharField(blank=True, max_length=400, null=True, verbose_name='SEO description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modification time')),
                ('image', easy_thumbnails.fields.ThumbnailerImageField(blank=True, null=True, upload_to=common.models.thumbnailed.ThumbnailedMixin._get_thumbnail_upload_path, verbose_name='Images')),
                ('name', models.CharField(max_length=200, verbose_name='Brand name')),
                ('handle', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('icecat_id', models.BigIntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='IceCat ID')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_seo_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='SEO title')),
                ('_seo_description', models.CharField(blank=True, max_length=400, null=True, verbose_name='SEO description')),
                ('slug', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modification time')),
                ('name', models.CharField(max_length=200, verbose_name='Category title')),
                ('has_products', models.BooleanField(default=True, help_text='***help_text*** Has products', verbose_name='Has products')),
                ('show_products', models.BooleanField(default=True, help_text='***help_text*** Show products', verbose_name='Show products')),
                ('show_subcategory_products', models.BooleanField(default=True, help_text='***help_text*** Show subcategories products', verbose_name='Show subcategories products')),
                ('custom_characters', models.BooleanField(default=False, help_text='***help_text*** Custom characters', verbose_name='Custom characters')),
                ('default_digital', models.NullBooleanField(default=None, verbose_name='Default digital')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Cluster title')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
            ],
            options={
                'verbose_name': 'Cluster',
                'verbose_name_plural': 'Clusters',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Currency name')),
                ('symbol', models.CharField(max_length=10, verbose_name='Currency symbol')),
                ('symbol_before', models.BooleanField(default=False, verbose_name='Currency symbol before value')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
                ('disabled', models.BooleanField(default=False, help_text='Currency is disabled for being used', verbose_name='Disabled')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
            },
        ),
        migrations.CreateModel(
            name='DiscountPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_rule', models.CharField(choices=[('PREV_30_DAYS', 'PREV 30 DAYS'), ('PREV_MONTH', 'PREV MONTH'), ('PREV_2_MONTHS', 'PREV 2 MONTHS'), ('PREV_3_MONTHS', 'PREV 3 MONTHS'), ('PREV_6_MONTHS', 'PREV 6 MONTHS'), ('PREV_12_MONTHS', 'PREV 12 MONTHS'), ('PREV_QUARTER', 'PREV QUARTER'), ('PREV_HALF', 'PREV HALF'), ('PREV_YEAR', 'PREV YEAR'), ('ALWAYS', 'ALWAYS')], max_length=20, verbose_name='Discount period basis')),
                ('smooth_cumulative', models.BooleanField(default=True, help_text='', verbose_name='Smooth cumulative discount')),
                ('smooth_per_order', models.BooleanField(default=True, verbose_name='Smooth per-order discount')),
            ],
            options={
                'verbose_name': 'Discount policy',
                'verbose_name_plural': 'Discount policies',
            },
        ),
        migrations.CreateModel(
            name='PriceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Price type title')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
            ],
            options={
                'verbose_name': 'Price type',
                'verbose_name_plural': 'Prices types',
            },
        ),
        migrations.CreateModel(
            name='Promo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_at', models.DateField(default=None)),
                ('end_at', models.DateField(default=None)),
            ],
            options={
                'verbose_name': 'Promo Action',
                'verbose_name_plural': 'Promo Actions',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Stock name')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
            ],
            options={
                'verbose_name': 'Stock',
                'verbose_name_plural': 'Stocks',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Supplier name')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
            },
        ),
        migrations.CreateModel(
            name='TaxPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vat', models.IntegerField(help_text='VAT increase cost of product in pricelist. Prices are stored without VAT', verbose_name='VAT')),
                ('sales_tax', models.IntegerField(help_text='Salex TAX increase cost of product in pricelist. Prices are stored without VAT', verbose_name='Salex TAX')),
                ('smooth_cumulative', models.BooleanField(default=True, verbose_name='Smooth cumulative discount')),
                ('smooth_per_order', models.BooleanField(default=True, verbose_name='Smooth per-order discount')),
            ],
            options={
                'verbose_name': 'Tax policy',
                'verbose_name_plural': 'Tax policies',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Unit title')),
                ('symbol', models.CharField(max_length=200, verbose_name='Unit symbol')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
                ('system', models.SmallIntegerField(choices=[(1, 'Metric'), (2, 'Imperial'), (3, 'Other')], verbose_name='Measurement system')),
                ('type', models.CharField(choices=[('Bit size', 'Bit size'), ('Bit speed', 'Bit speed'), ('Byte size', 'Byte size'), ('Byte speed', 'Byte speed'), ('Corner', 'Corner'), ('Count', 'Count'), ('Electric charge', 'Electric charge'), ('Electric current', 'Electric current'), ('Frequency', 'Frequency'), ('Length', 'Length'), ('luminance', 'luminance'), ('Power', 'Power'), ('Resolution', 'Resolution'), ('Temperature', 'Temperature'), ('Time', 'Time'), ('Voltage', 'Voltage'), ('Volume', 'Volume'), ('Weight', 'Weight')], default='Count', max_length=20, verbose_name='Type')),
                ('multiplier', models.FloatField(blank=True, default=None, null=True, verbose_name='Multiplier')),
                ('icecat_id', models.BigIntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='IceCat ID')),
            ],
            options={
                'verbose_name': 'Unit',
                'verbose_name_plural': 'Units',
            },
        ),
        migrations.CreateModel(
            name='TaxCluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Cluster title')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Handle')),
                ('tax_policy', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='tax_cluster', related_query_name='tax_clusters', to='store.TaxPolicy', verbose_name='Тах policy')),
            ],
            options={
                'verbose_name': 'Тах cluster ',
                'verbose_name_plural': 'Тах clusters',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_seo_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='SEO title')),
                ('_seo_description', models.CharField(blank=True, max_length=400, null=True, verbose_name='SEO description')),
                ('slug', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modification time')),
                ('articul', models.CharField(max_length=100, unique=True, verbose_name='Аrticle')),
                ('name', models.CharField(max_length=200, verbose_name='Product name')),
                ('digital', models.BooleanField(default=False, verbose_name='Digital')),
                ('package_volume', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Package Volume')),
                ('package_weight', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Package Weight')),
                ('package_count', models.PositiveIntegerField(verbose_name='Package Count')),
                ('categories', models.ManyToManyField(blank=True, related_name='product', related_query_name='products', to='store.Category', verbose_name='Categories')),
                ('cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.Cluster', verbose_name='Cluster')),
                ('components', models.ManyToManyField(blank=True, related_name='complects', related_query_name='complect', to='store.Product', verbose_name='Product')),
                ('master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skus', related_query_name='sku', to='store.Product', verbose_name='Product')),
                ('tax_cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.TaxCluster', verbose_name='Tax cluster')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='products', related_query_name='product', to='store.Unit', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Product',
            },
        ),
        migrations.CreateModel(
            name='PerOrderStepping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.BigIntegerField(verbose_name='Order summ')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Discount value')),
                ('discount_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='per_order_steppings', related_query_name='per_order_stepping', to='store.DiscountPolicy', verbose_name='Discount policy')),
            ],
            options={
                'verbose_name': 'Order summ step',
                'verbose_name_plural': 'Order summ steps',
            },
        ),
        migrations.CreateModel(
            name='ParentPivot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inheritance', models.BooleanField(default=True, help_text='***help_text*** Character inheritance', verbose_name='Character inheritance')),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_refs', to='store.Category', verbose_name='Child category')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_refs', to='store.Category', verbose_name='Parent category')),
            ],
            options={
                'verbose_name': 'Parent category',
                'verbose_name_plural': 'Parent categories',
            },
        ),
        migrations.CreateModel(
            name='MpttNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tree_id', models.IntegerField(db_index=True)),
                ('inheriters_tree', models.BooleanField(db_index=True)),
                ('mptt_left', models.IntegerField(db_index=True)),
                ('mptt_right', models.IntegerField(db_index=True)),
                ('mptt_level', models.IntegerField(db_index=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='store.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('discount_value', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('discount_valid_till', models.DateField(blank=True, null=True)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='store.Currency')),
                ('discount_policy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='store.DiscountPolicy')),
                ('price_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='store.PriceType')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
            },
            bases=('user.user',),
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CumulativeStepping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.BigIntegerField(verbose_name='Cumulative orders summ')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Discount value')),
                ('discount_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cumulatime_steppings', related_query_name='cumulatime_stepping', to='store.DiscountPolicy', verbose_name='Discount policy')),
            ],
            options={
                'verbose_name': 'Cumulative orders summ step',
                'verbose_name_plural': 'Cumulative orders summ steps',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handle', models.CharField(max_length=2, unique=True, verbose_name='Country ISO Alpha-2 code')),
                ('name', models.CharField(max_length=200, verbose_name='Country name')),
                ('language', models.CharField(blank=True, choices=[('ru', 'Русский'), ('en', 'English')], help_text='Only hardcoded languages available', max_length=2, null=True, verbose_name='Language')),
                ('post_code_rule', models.CharField(blank=True, max_length=100, null=True)),
                ('disabled', models.BooleanField(default=False, help_text='Country is disabled for being used', verbose_name='Disabled')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='store.Currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Country',
            },
        ),
        migrations.AddField(
            model_name='cluster',
            name='discount_policy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='store.DiscountPolicy', verbose_name='Discount policy'),
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_name', models.CharField(help_text='used in admin panel', max_length=100, verbose_name='Internal character name')),
                ('handle', models.SlugField(help_text='case insensitive', max_length=32, unique=True, verbose_name='Hadle')),
                ('public_name', models.CharField(blank=True, help_text='used in public interface', max_length=100, null=True, verbose_name='Public character name')),
                ('help_text', models.CharField(blank=True, max_length=250, null=True, verbose_name='Help text')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Detailed description')),
                ('filterable', models.BooleanField(default=True)),
                ('include_into_index_value', models.BooleanField(default=True)),
                ('include_into_index_name', models.BooleanField(default=True)),
                ('position', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='Character position in search map')),
                ('character_type', models.IntegerField(choices=[(1, 'Integer value'), (2, 'Float value'), (3, 'Fixed decimal value, 1 digit after comma'), (4, 'Fixed decimal value, 2 digits after comma'), (5, 'Fixed decimal value, 3 digits after comma'), (6, 'Set of string values'), (7, 'Set of string values'), (8, 'Set of string values')], default=7)),
                ('icecat_id', models.BigIntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='IceCat ID')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='store.Unit', verbose_name="Character's unit")),
            ],
            options={
                'verbose_name': 'Character',
                'verbose_name_plural': 'Characters',
                'unique_together': {('internal_name', 'unit')},
            },
        ),
        migrations.CreateModel(
            name='CategoryCharacterPivot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Category')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.Character')),
            ],
            options={
                'verbose_name': 'Category character',
                'verbose_name_plural': 'Category characters',
            },
        ),
        migrations.AddField(
            model_name='category',
            name='characters',
            field=models.ManyToManyField(through='store.CategoryCharacterPivot', to='store.Character', verbose_name='Custom category characters'),
        ),
        migrations.AddField(
            model_name='category',
            name='default_stock',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories', related_query_name='category', to='store.Stock', verbose_name='Default Supplier'),
        ),
        migrations.AddField(
            model_name='category',
            name='default_supplier',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories', related_query_name='category', to='store.Supplier', verbose_name='Default Supplier'),
        ),
        migrations.AddField(
            model_name='category',
            name='parents',
            field=models.ManyToManyField(related_name='childs', related_query_name='child', through='store.ParentPivot', to='store.Category', verbose_name='Parent categories'),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postcode', models.CharField(blank=True, max_length=10, null=True, verbose_name='Post code')),
                ('region', models.CharField(blank=True, max_length=100, null=True, verbose_name='Region')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('address1', models.CharField(blank=True, max_length=200, null=True, verbose_name='Street, Home')),
                ('address2', models.CharField(blank=True, max_length=20, null=True, verbose_name='Office/Apartment/Room')),
                ('doorphone', models.CharField(blank=True, max_length=10, null=True, verbose_name='Doorphone')),
                ('comment', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Address comment')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=11, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True, verbose_name='Longitude')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='store.Country', verbose_name='Country')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BigIntegerField(verbose_name='Value')),
                ('computed', models.BooleanField(verbose_name='Complect computed price')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', related_query_name='price', to='store.Currency', verbose_name='Currency')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', related_query_name='price', to='store.Product', verbose_name='Product')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', related_query_name='price', to='store.PriceType', verbose_name='Price type')),
            ],
            options={
                'verbose_name': 'Price',
                'verbose_name_plural': 'Prices',
                'unique_together': {('type', 'product')},
            },
        ),
        migrations.CreateModel(
            name='CharacterChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100, verbose_name='Character value')),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='store.Character', verbose_name='Character')),
            ],
            options={
                'verbose_name': 'Character choice',
                'verbose_name_plural': 'Character choices',
                'unique_together': {('character', 'value')},
            },
        ),
    ]
